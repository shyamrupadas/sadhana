import { HabitDefinition, sadhanaDB } from './db/sadhanaDB'

// üîß –£—Ç–∏–ª–∏—Ç–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è key –∏–∑ label (—Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è + slugify)
function generateHabitKey(label: string): string {
  return label
    .toLowerCase()
    .trim()
    .replace(/\s+/g, '-') // –ø—Ä–æ–±–µ–ª—ã ‚Üí –¥–µ—Ñ–∏—Å—ã
    .replace(/[^a-z–∞-—è—ë0-9\-]/gi, '') // —É–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .normalize('NFKD') // —É–±—Ä–∞—Ç—å –¥–∏–∞–∫—Ä–∏—Ç–∏–∫—É
    .replace(/[\u0300-\u036f]/g, '')
}

export const habitApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
  async getAll(): Promise<HabitDefinition[]> {
    return await sadhanaDB.habitDefinitions.toArray()
  },

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è key –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏)
  async add(label: string): Promise<void> {
    const key = generateHabitKey(label)
    const now = new Date().toISOString()

    const existing = await sadhanaDB.habitDefinitions.get(key)
    if (existing) return // –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç

    const habit: HabitDefinition = {
      key,
      label,
      createdAt: now,
    }

    await sadhanaDB.habitDefinitions.put(habit)
  },

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –ø–æ –∫–ª—é—á—É
  async delete(key: string): Promise<void> {
    await sadhanaDB.habitDefinitions.delete(key)
  },
}
